["^ ","~:zip","~","~:db",["^ ","~:version","0.1.14-SNAPSHOT-<<Inserted By Github Actions>>\n","~:options",["^ ","~:visr-defaults",["^ "],"~:show-editors",true,"~:insert-close",true,"~:enable-drag-and-drop",true,"~:line-numbers",true,"~:font-size",12,"~:orientation","horizontal","~:keymap","sublime","~:theme","material","~:line-wrapping",false,"~:run-functions",["main"],"~:autocomplete","auto","~:tab-behavior","auto"],"~:current",0,"~:folder","/files/hexgame","~:buffers",[["^ ","^B","/files/hexgame","~:ns","~$hexgame.use","~:file","use.cljs","~:cursor",null,"~:output","","~:split","64.80%","~:scroll",["^ "],"~:changed?",false,"~:input","(ns hexgame.use\n  (:require [hexgame.core :refer [move-player] :include-macros true]\n            [cljs.test :refer [is] :include-macros true]))\n\n\n(is (= (move-player ^{:editor hexgame.core/Board :show-visr true :show-text false}(hexgame.core/Board+elaborate {:width \"4\",\n :height \"4\",\n :cells {},\n :players {:count \"2\", :players {}}}\n) 1 :down) ^{:editor hexgame.core/Board :show-visr true :show-text false}(hexgame.core/Board+elaborate {:width \"4\",\n :height \"4\",\n :cells {},\n :players {:count \"2\", :players {}}}\n)))\n"]],"~:fs",["^ "],"~:deps",["^ ","~i1631848291392",["^ ","~:name","react-hexgrid","^2","","~:url",""]],"~:menu",[]]]