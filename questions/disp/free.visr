["^ ","~:zip","~","~:db",["^ ","~:version","0.1.15-SNAPSHOT-<<Inserted By Github Actions>>\n","~:options",["^ ","~:visr-defaults",["^ "],"~:show-editors",true,"~:insert-close",true,"~:enable-drag-and-drop",true,"~:line-numbers",true,"~:font-size",12,"~:orientation","horizontal","~:keymap","sublime","~:theme","material","~:line-wrapping",false,"~:run-functions",["main"],"~:autocomplete","auto","~:tab-behavior","auto"],"~:current",0,"~:folder","/files/display","~:buffers",[["^ ","^B","/files/display","~:ns","~$cljs.user","~:file","use.cljs","~:cursor",null,"~:output","","~:split","80.42%","~:scroll",["^ "],"~:changed?",false,"~:input","(ns display.use\n  (:require [display.core :include-macros true]\n            [cljs.test :refer [is] :include-macros true]))\n\n(def disp ^{:editor display.core/Display :show-visr true :show-text false}(display.core/Display+elaborate {:input \"_\",\n :displays \"1\",\n :segs\n {0 \":=> 0, 2, 3,\\n5, 6, 7\",\n  1 \"#TODO#\",\n  2 \"#TODO#\",\n  3 \"#TODO#\",\n  4 \"#TODO#\",\n  5 \"#TODO#\",\n  6 \"#TODO#\",\n  7 \"_\",\n  8 \"_\",\n  9 \"_\",\n  10 \"_\",\n  11 \"_\",\n  12 \"10 :- 19,\\n20 :- 29,\\n30 :- 39\",\n  13 \"_\"}, \n :example-input 0}\n))\n\n(is (= (disp 0) (js/parseInt \"1111110\" 2)))\n(is (= (disp 1) (js/parseInt \"0110000\" 2)))\n(is (= (disp 2) (js/parseInt \"1101101\" 2)))\n(is (= (disp 3) (js/parseInt \"1111001\" 2)))\n(is (= (disp 4) (js/parseInt \"0110011\" 2)))\n(is (= (disp 5) (js/parseInt \"1011011\" 2)))\n(is (= (disp 6) (js/parseInt \"1011111\" 2)))\n(is (= (disp 7) (js/parseInt \"1110000\" 2)))\n"]],"~:fs",["^ "],"~:deps",["^ "],"~:menu",["~:home"]]]